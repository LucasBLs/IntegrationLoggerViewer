@using IntegrationLogger.Enums;
@using IntegrationLogger;
@using IntegrationLogger.Models
@using Microsoft.EntityFrameworkCore;
@using Microsoft.EntityFrameworkCore.Query;
@using MudBlazor
@using System.Diagnostics;
@using IntegrationLogger.Models.Integration;
@inject IIntegrationLogRepository _repository;

<MudContainer>
    <MudExpansionPanels Elevation="1" Rounded="true">
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" class="mr-3"></MudIcon>
                    <MudText><strong>Filtro</strong> - Logs de integração</MudText>
                </div>
            </TitleContent>
                <ChildContent>
                <MudGrid>
           
                    <MudItem xs="12" sm="6" md="3">
                        <MudDatePicker Label="Data inicial"
                                       PickerVariant="PickerVariant.Inline"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       DateFormat="dd/MM/yyyy"
                                       @bind-Date="@startDateFilter"
                                       Editable="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudTimePicker Label="Hora inicial"
                                       Margin="Margin.Dense"
                                       Variant="Variant.Outlined"
                                       TimeFormat="HH:mm:ss"
                                       @bind-Time="@startTimeFilter"
                                       Editable="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudDatePicker Label="Data final"
                                       PickerVariant="PickerVariant.Inline"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       DateFormat="dd/MM/yyyy"
                                       @bind-Date="@endDateFilter"
                                       Editable="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudTimePicker Label="Hora final"
                                       Margin="Margin.Dense"
                                       Variant="Variant.Outlined"
                                       TimeFormat="HH:mm:ss"
                                       @bind-Time="@endTimeFilter"
                                       Editable="true" />
                    </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudTextField Value="@searchString"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"
                                  ValueChanged="@(async (string value) => { searchString = value; SearchAndUpdateTable(); })"
                                  Label="Buscar por identificador" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect Label="Select a project" Margin="Margin.Dense" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedProject">
                        @if(projectNames != null)
                        {
                            @foreach (var projectName in projectNames)
                            {
                                <MudSelectItem Value="@projectName">@projectName</MudSelectItem>
                            }
                        } 
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="2">
                    <MudChipSet Filter="@filterWithIdentifier">
                        <MudChip Default=true Text="Com identificador" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ChipState()" />
                    </MudChipSet>
                </MudItem>
                <MudItem xs="12" sm="6" md="2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(async () => SearchAndUpdateTable())">Consultar</MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="async () => ClearFilters()">Limpar filtros</MudButton>
                </MudItem>
                </MudGrid>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudTable @key="@tableKey" FixedHeader=true Items="@logs" PageSize="@pageSize" ServerData="new Func<TableState, Task<TableData<IntegrationDetail>>>(GetTableData)" TableState="@tableState">
        <HeaderContent>
            <MudTh>Action</MudTh>
            <MudTh>IntegrationName</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Identifier</MudTh>
            <MudTh>Message</MudTh>
            <MudTh>Timestamp</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => OnDetailsClicked.InvokeAsync(context.Id))">Detalhes</MudButton>
            </MudTd>
            <MudTd DataLabel="IntegrationLogName">@context.IntegrationLogName</MudTd>
            <MudTd DataLabel="Status" Style="@($"{GetStatusColor(context.Status)}")">@context.Status</MudTd>
            <MudTd DataLabel="DetailIdentifier">@context.DetailIdentifier</MudTd>
            <MudTd DataLabel="Message">@context.Message</MudTd>
            <MudTd DataLabel="Timestamp">@context.Timestamp.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss:ffff")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    // Propriedades
    [Parameter] public string? IntegrationNameFilter { get; set; } = string.Empty;
    [Parameter] public EventCallback<Guid> OnDetailsClicked { get; set; }

    // Campos
    private List<IntegrationDetail> logs = new();
    private string searchString = "";
    private int pageSize = 10;
    private TableState tableState = new TableState { PageSize = 10 };
    private int tableKey = 0;
    private bool filterWithIdentifier = true;
    private List<string?>? projectNames;
    private string? selectedProject;
    private DateTime? startDateFilter = DateTime.Now.ToLocalTime().AddDays(-1).Date;
    private DateTime? endDateFilter = DateTime.Now.ToLocalTime().Date;
    private TimeSpan? startTimeFilter = new TimeSpan(0, 0, 1);
    private TimeSpan? endTimeFilter = new TimeSpan(23, 59, 59);

    // Métodos
    private async Task<TableData<IntegrationDetail>> GetTableData(TableState state)
    {
        pageSize = state.PageSize;

        DateTime? combinedStartDate = startDateFilter.HasValue && startTimeFilter.HasValue
            ? startDateFilter.Value.Date + startTimeFilter.Value
            : startDateFilter;

        DateTime? combinedEndDate = endDateFilter.HasValue && endTimeFilter.HasValue
            ? endDateFilter.Value.Date + endTimeFilter.Value
            : endDateFilter;

        var (details, totalCount) = await _repository.GetDetails(combinedStartDate, combinedEndDate, searchString, filterWithIdentifier, IntegrationNameFilter, pageIndex: state.Page + 1, pageSize: pageSize);

        return new TableData<IntegrationDetail> { TotalItems = totalCount, Items = details };
    }
    private void SearchAndUpdateTable()
    {
        IntegrationNameFilter = selectedProject;
        tableState.Page = 0;
        tableKey++;
        StateHasChanged();
    }
    private string GetStatusColor(IntegrationStatus status)
    {
        return status switch
        {
            IntegrationStatus.Success => "color: rgb(13, 222, 156); text-shadow: 0 0 1px rgb(13,222,156);", // Cor correspondente a Color.Success
            IntegrationStatus.Failed => "color: rgb(248,119,134); text-shadow: 0 0 1px rgb(248,119,134);", // Cor correspondente a Color.Error
            _ => "inherit"
        };
    }
    private DateRange GetDateRange()
    {
        return new DateRange(startDateFilter, endDateFilter);
    }
    private void ChipState()
    {
        if (filterWithIdentifier is true)
            filterWithIdentifier = false;
        else
            filterWithIdentifier = true;
    }
    private void ClearFilters()
    {
        searchString = "";
        filterWithIdentifier = true;
        startDateFilter = DateTime.Now.ToLocalTime().AddDays(-3).Date;
        endDateFilter = DateTime.Now.ToLocalTime().Date;
        startTimeFilter = DateTime.Now.ToLocalTime().TimeOfDay;
        endTimeFilter = DateTime.Now.ToLocalTime().TimeOfDay;

        SearchAndUpdateTable();
    }
    protected override async Task OnInitializedAsync()
    {
        var projects = await _repository.GetLogs();
        projectNames = projects.logs.Select(x => x.IntegrationName).ToList();
        await base.OnInitializedAsync();
    }
    protected override void OnParametersSet()
    {
        SearchAndUpdateTable();
    }
}